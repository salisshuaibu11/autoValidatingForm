function validate(event) {
  const inputElement = event.target;
  inputElement.classList.add('signup__field__input--error');

  const errorMessageElement = event.target.parentElement.getElementsByClassName('signup__field__error')[0];
  errorMessageElement.innerHTML = 'Sample Error';
}

const inputs = document.getElementsByClassName('signup__field__input');

for (const input of inputs) {
  input.onblur = validate;
}

function isValidName(name) {
	// TODO
	document.querySelector('.results').innerHTML = name;
}

function isValidEmail(name) {
	// TODO
	document.querySelector('.results').innerHTML = name;
}

// Unit Tests
function runTests() {
	firstNameTest();
	emailTest();
}

runTests();

function runner({inputs, expectedOutputs, func}) {
	let results = "";
	for (let i = 0; i < inputs.length; i++) {
		const passFailString = func(inputs[i]) === expectedOutputs[i] ? 
			'Pass' :
			'<span style="color: red">Fail</span>';
		const result = `${func.name}(${inputs[i]}) === ${expectedOutputs[i]}: ${passFailString}`;
		results += (result + "<br>");
	}
	const resultsElement = document.getElementsByClassName('results')[0];
	resultsElement.innerHTML += (results + "<br>");
};

function firstNameTest() {
	const invalidInputs = ["@", "", "blah$", "123"];
	const validInputs = ["asdf", "Alfred", "ALFRED"];

	runner({
		inputs: validInputs,
		expectedOutputs: validInputs.map(_ => true),
		func: isValidName
	});
}

function emailTest() {
	const invalidEmails = ["@asdf.com", "what@what", "", ".."];
	const validEmails = ["asdf@asdf.com", "what@what.au", "a@a.c"];

	runner({
		inputs: validEmails,
		expectedOutputs: validEmails.map(_ => true),
		func: isValidEmail
	});

	runner({
		inputs: invalidEmails,
		expectedOutputs: invalidEmails.map(_ => true),
		func: isValidEmail
	});
};

// Integration Test
function TestBugIntegration() {
	let longName = '';
	for (let i = 0; i < 3000; i++) {
		longName += 'blah';
	}

	const firstNameInput = document.getElementsByClassName('form__input--firstName')[0];
	firstNameInput.value = longName;

	httpRequest({
		url: '/saveFrom',
		data: serialize()
	});

	const serializedForm = httpRequest({
		ulr: '/getForm',
	});
	const form = deserialize(serializedForm);

	// This will fail!
	assert(form.firstName === longName);
}

function TestPasswordGuide() {
	const passordInput = document.getElementsByClassName('password__guide__message')[0];

	const badPassword = 'foo';
	const goodPassword = badPassword + 'bar123';

	for (const character of badPassword) {
		const keypress = new Event('keydown');
		keypress.key = character;
		document.dispatchEvent(keypress);
	}

	assert(passwordGuideMessage.innerHTML === 'bad');

	for (const character of goodPassword) {
		const keypress = new Event('keydown');
		keypress.key = character;
		document.dispatchEvent(keypress);
	};

	assert(passwordGuideMessage.innerHTML === 'good');
};